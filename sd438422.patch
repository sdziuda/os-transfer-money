diff -rupNEZbB OriginalSources/usr/include/minix/callnr.h Sources/usr/include/minix/callnr.h
--- OriginalSources/usr/include/minix/callnr.h	2014-09-14 11:00:44.000000000 +0200
+++ Sources/usr/include/minix/callnr.h	2023-05-10 20:19:00.528408347 +0200
@@ -58,8 +58,9 @@
 #define PM_GETEPINFO		(PM_BASE + 45)
 #define PM_GETPROCNR		(PM_BASE + 46)
 #define PM_GETSYSINFO		(PM_BASE + 47)
+#define PM_TRANSFER_MONEY   (PM_BASE + 48)
 
-#define NR_PM_CALLS		48	/* highest number from base plus one */
+#define NR_PM_CALLS		49	/* highest number from base plus one */
 
 /*===========================================================================*
  *				Calls to VFS				     *
diff -rupNEZbB OriginalSources/usr/include/minix/config.h Sources/usr/include/minix/config.h
--- OriginalSources/usr/include/minix/config.h	2014-09-14 11:00:44.000000000 +0200
+++ Sources/usr/include/minix/config.h	2023-05-10 22:53:34.188408027 +0200
@@ -95,4 +95,7 @@
 #define NR_PCIBUS 40
 #define NR_PCIDEV 50
 
+#define INIT_BALANCE 100
+#define MAX_BALANCE 1000
+
 #endif /* _CONFIG_H */
diff -rupNEZbB OriginalSources/usr/include/minix/ipc.h Sources/usr/include/minix/ipc.h
--- OriginalSources/usr/include/minix/ipc.h	2014-09-14 11:00:44.000000000 +0200
+++ Sources/usr/include/minix/ipc.h	2023-05-12 14:48:12.685171618 +0200
@@ -2024,6 +2024,14 @@ typedef struct {
 _ASSERT_MSG_SIZE(mess_vmmcp_reply);
 
 typedef struct {
+    pid_t recipient;
+    int amount;
+    int result;
+    uint8_t padding[44];
+} mess_pm_transfer;
+_ASSERT_MSG_SIZE(mess_pm_transfer);
+
+typedef struct {
 	endpoint_t m_source;		/* who sent the message */
 	int m_type;			/* what kind of message is it */
 	union {
@@ -2251,6 +2259,7 @@ typedef struct {
 		mess_vm_vfs_mmap	m_vm_vfs_mmap;
 		mess_vmmcp		m_vmmcp;
 		mess_vmmcp_reply	m_vmmcp_reply;
+        mess_pm_transfer    m_pm_transfer;
 
 		u8_t size[56];	/* message payload may have 56 bytes at most */
 	};
diff -rupNEZbB OriginalSources/usr/include/unistd.h Sources/usr/include/unistd.h
--- OriginalSources/usr/include/unistd.h	2014-09-14 11:00:42.000000000 +0200
+++ Sources/usr/include/unistd.h	2023-05-11 15:18:57.416767805 +0200
@@ -411,5 +411,7 @@ extern	 int optreset;		/* getopt(3) exte
 extern	 char *suboptarg;	/* getsubopt(3) external variable */
 #endif
 
+int transfermoney(pid_t recipient, int amount);
+
 __END_DECLS
 #endif /* !_UNISTD_H_ */
diff -rupNEZbB OriginalSources/usr/src/include/unistd.h Sources/usr/src/include/unistd.h
--- OriginalSources/usr/src/include/unistd.h	2014-09-13 23:56:50.000000000 +0200
+++ Sources/usr/src/include/unistd.h	2023-05-11 15:24:58.906768530 +0200
@@ -411,5 +411,7 @@ extern	 int optreset;		/* getopt(3) exte
 extern	 char *suboptarg;	/* getsubopt(3) external variable */
 #endif
 
+int transfermoney(pid_t recipient, int amount);
+
 __END_DECLS
 #endif /* !_UNISTD_H_ */
diff -rupNEZbB OriginalSources/usr/src/lib/libc/misc/Makefile.inc Sources/usr/src/lib/libc/misc/Makefile.inc
--- OriginalSources/usr/src/lib/libc/misc/Makefile.inc	2014-09-13 23:56:50.000000000 +0200
+++ Sources/usr/src/lib/libc/misc/Makefile.inc	2023-05-11 15:34:27.936765988 +0200
@@ -8,3 +8,5 @@ SRCS+=	initfini.c
 
 # for -fstack-protector
 SRCS+=	stack_protector.c
+
+SRCS+= transfermoney.c
diff -rupNEZbB OriginalSources/usr/src/lib/libc/misc/transfermoney.c Sources/usr/src/lib/libc/misc/transfermoney.c
--- OriginalSources/usr/src/lib/libc/misc/transfermoney.c	1970-01-01 01:00:00.000000000 +0100
+++ Sources/usr/src/lib/libc/misc/transfermoney.c	2023-05-13 20:48:06.696247689 +0200
@@ -0,0 +1,15 @@
+#include <lib.h>
+#include <unistd.h>
+
+int transfermoney(pid_t recipient, int amount) {
+    message m;
+    m.m_pm_transfer.recipient = recipient;
+    m.m_pm_transfer.amount = amount;
+
+    errno = 0;
+    if (_syscall(PM_PROC_NR, PM_TRANSFER_MONEY, &m) == 0) {
+        return m.m_pm_transfer.result;
+    }
+
+    return -1;
+}
diff -rupNEZbB OriginalSources/usr/src/minix/include/minix/callnr.h Sources/usr/src/minix/include/minix/callnr.h
--- OriginalSources/usr/src/minix/include/minix/callnr.h	2014-09-13 23:56:50.000000000 +0200
+++ Sources/usr/src/minix/include/minix/callnr.h	2023-05-10 20:18:07.328408271 +0200
@@ -58,8 +58,9 @@
 #define PM_GETEPINFO		(PM_BASE + 45)
 #define PM_GETPROCNR		(PM_BASE + 46)
 #define PM_GETSYSINFO		(PM_BASE + 47)
+#define PM_TRANSFER_MONEY   (PM_BASE + 48)
 
-#define NR_PM_CALLS		48	/* highest number from base plus one */
+#define NR_PM_CALLS		49	/* highest number from base plus one */
 
 /*===========================================================================*
  *				Calls to VFS				     *
diff -rupNEZbB OriginalSources/usr/src/minix/include/minix/config.h Sources/usr/src/minix/include/minix/config.h
--- OriginalSources/usr/src/minix/include/minix/config.h	2014-09-13 23:56:50.000000000 +0200
+++ Sources/usr/src/minix/include/minix/config.h	2023-05-10 22:50:03.148409009 +0200
@@ -95,4 +95,7 @@
 #define NR_PCIBUS 40
 #define NR_PCIDEV 50
 
+#define INIT_BALANCE 100
+#define MAX_BALANCE 1000
+
 #endif /* _CONFIG_H */
diff -rupNEZbB OriginalSources/usr/src/minix/include/minix/ipc.h Sources/usr/src/minix/include/minix/ipc.h
--- OriginalSources/usr/src/minix/include/minix/ipc.h	2014-09-13 23:56:50.000000000 +0200
+++ Sources/usr/src/minix/include/minix/ipc.h	2023-05-12 14:48:12.845171618 +0200
@@ -2024,6 +2024,14 @@ typedef struct {
 _ASSERT_MSG_SIZE(mess_vmmcp_reply);
 
 typedef struct {
+    pid_t recipient;
+    int amount;
+    int result;
+    uint8_t padding[44];
+} mess_pm_transfer;
+_ASSERT_MSG_SIZE(mess_pm_transfer);
+
+typedef struct {
 	endpoint_t m_source;		/* who sent the message */
 	int m_type;			/* what kind of message is it */
 	union {
@@ -2251,6 +2259,7 @@ typedef struct {
 		mess_vm_vfs_mmap	m_vm_vfs_mmap;
 		mess_vmmcp		m_vmmcp;
 		mess_vmmcp_reply	m_vmmcp_reply;
+        mess_pm_transfer    m_pm_transfer;
 
 		u8_t size[56];	/* message payload may have 56 bytes at most */
 	};
diff -rupNEZbB OriginalSources/usr/src/minix/servers/pm/Makefile Sources/usr/src/minix/servers/pm/Makefile
--- OriginalSources/usr/src/minix/servers/pm/Makefile	2014-09-13 23:56:50.000000000 +0200
+++ Sources/usr/src/minix/servers/pm/Makefile	2023-05-10 20:26:00.258409445 +0200
@@ -4,7 +4,7 @@
 PROG=	pm
 SRCS=	main.c forkexit.c exec.c time.c alarm.c \
 	signal.c utility.c table.c trace.c getset.c misc.c \
-	profile.c mcontext.c schedule.c
+	profile.c mcontext.c schedule.c transfermoney.c
 
 DPADD+=	${LIBSYS} ${LIBTIMERS}
 LDADD+=	-lsys -ltimers
diff -rupNEZbB OriginalSources/usr/src/minix/servers/pm/forkexit.c Sources/usr/src/minix/servers/pm/forkexit.c
--- OriginalSources/usr/src/minix/servers/pm/forkexit.c	2014-09-13 23:56:50.000000000 +0200
+++ Sources/usr/src/minix/servers/pm/forkexit.c	2023-05-12 14:41:46.645174003 +0200
@@ -112,6 +112,7 @@ int do_fork()
   /* Find a free pid for the child and put it in the table. */
   new_pid = get_free_pid();
   rmc->mp_pid = new_pid;	/* assign pid to child */
+  rmc->mp_balance = INIT_BALANCE;
 
   memset(&m, 0, sizeof(m));
   m.m_type = VFS_PM_FORK;
@@ -204,6 +205,7 @@ int do_srv_fork()
   /* Find a free pid for the child and put it in the table. */
   new_pid = get_free_pid();
   rmc->mp_pid = new_pid;	/* assign pid to child */
+  rmc->mp_balance = INIT_BALANCE;
 
   memset(&m, 0, sizeof(m));
   m.m_type = VFS_PM_SRV_FORK;
diff -rupNEZbB OriginalSources/usr/src/minix/servers/pm/main.c Sources/usr/src/minix/servers/pm/main.c
--- OriginalSources/usr/src/minix/servers/pm/main.c	2014-09-13 23:56:50.000000000 +0200
+++ Sources/usr/src/minix/servers/pm/main.c	2023-05-12 14:41:46.695174005 +0200
@@ -179,6 +179,7 @@ static int sef_cb_init_fresh(int UNUSED(
 
 		/* Set process details found in the image table. */
 		rmp = &mproc[ip->proc_nr];	
+        rmp->mp_balance = INIT_BALANCE;
   		strlcpy(rmp->mp_name, ip->proc_name, PROC_NAME_LEN); 
   		(void) sigemptyset(&rmp->mp_ignore);	
   		(void) sigemptyset(&rmp->mp_sigmask);
diff -rupNEZbB OriginalSources/usr/src/minix/servers/pm/mproc.h Sources/usr/src/minix/servers/pm/mproc.h
--- OriginalSources/usr/src/minix/servers/pm/mproc.h	2014-09-13 23:56:50.000000000 +0200
+++ Sources/usr/src/minix/servers/pm/mproc.h	2023-05-10 22:46:49.118408608 +0200
@@ -70,6 +70,8 @@ EXTERN struct mproc {
   char mp_name[PROC_NAME_LEN];	/* process name */
 
   int mp_magic;			/* sanity check, MP_MAGIC */
+
+  int mp_balance;       /* balance of the process */
 } mproc[NR_PROCS];
 
 /* Flag values */
diff -rupNEZbB OriginalSources/usr/src/minix/servers/pm/proto.h Sources/usr/src/minix/servers/pm/proto.h
--- OriginalSources/usr/src/minix/servers/pm/proto.h	2014-09-13 23:56:50.000000000 +0200
+++ Sources/usr/src/minix/servers/pm/proto.h	2023-05-10 20:34:55.138408701 +0200
@@ -89,3 +89,5 @@ struct mproc *find_proc(pid_t lpid);
 int nice_to_priority(int nice, unsigned *new_q);
 int pm_isokendpt(int ep, int *proc);
 void tell_vfs(struct mproc *rmp, message *m_ptr);
+
+int do_transfermoney(void);
diff -rupNEZbB OriginalSources/usr/src/minix/servers/pm/table.c Sources/usr/src/minix/servers/pm/table.c
--- OriginalSources/usr/src/minix/servers/pm/table.c	2014-09-13 23:56:50.000000000 +0200
+++ Sources/usr/src/minix/servers/pm/table.c	2023-05-11 17:08:58.256768141 +0200
@@ -58,5 +58,6 @@ int (* const call_vec[NR_PM_CALLS])(void
 	CALL(PM_EXEC_RESTART)	= do_execrestart,
 	CALL(PM_GETEPINFO)	= do_getepinfo,		/* getepinfo(2) */
 	CALL(PM_GETPROCNR)	= do_getprocnr,		/* getprocnr(2) */
-	CALL(PM_GETSYSINFO)	= do_getsysinfo		/* getsysinfo(2) */
+	CALL(PM_GETSYSINFO)	= do_getsysinfo,	/* getsysinfo(2) */
+    CALL(PM_TRANSFER_MONEY) = do_transfermoney,
 };
diff -rupNEZbB OriginalSources/usr/src/minix/servers/pm/transfermoney.c Sources/usr/src/minix/servers/pm/transfermoney.c
--- OriginalSources/usr/src/minix/servers/pm/transfermoney.c	1970-01-01 01:00:00.000000000 +0100
+++ Sources/usr/src/minix/servers/pm/transfermoney.c	2023-05-13 23:04:35.106247163 +0200
@@ -0,0 +1,43 @@
+#include "pm.h"
+#include "mproc.h"
+#include <stdbool.h>
+
+bool laundering(struct mproc *proc, pid_t forbidden_pid) {
+    struct mproc *check = proc;
+
+    while (mproc[check->mp_parent].mp_pid != check->mp_pid) {
+        if (mproc[check->mp_parent].mp_pid == forbidden_pid) {
+            return true;
+        }
+        check = &mproc[check->mp_parent];
+    }
+
+    return false;
+}
+
+int do_transfermoney(void) {
+    pid_t recipient = m_in.m_pm_transfer.recipient;
+    int amount = m_in.m_pm_transfer.amount;
+    pid_t sender = mp->mp_pid;
+
+    struct mproc *recipient_proc = find_proc(recipient);
+    if (recipient_proc == NULL) {
+        return ESRCH;
+    }
+
+    if (laundering(mp, recipient) || laundering(recipient_proc, sender)) {
+        return EPERM;
+    }
+
+    if (amount < 0 || mp->mp_balance < amount ||
+        recipient_proc->mp_balance > MAX_BALANCE - amount) {
+        return EINVAL;
+    }
+
+    mp->mp_balance -= amount;
+    recipient_proc->mp_balance += amount;
+
+    mp->mp_reply.m_pm_transfer.result = mp->mp_balance;
+
+    return 0;
+}
